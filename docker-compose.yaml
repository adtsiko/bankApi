---
version: '3.4'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "finance"]
      interval: 5s
      retries: 5
    env_file:
      - local.env

  bank-api:
    image: bank-api:0.1.0
    container_name: bank_api
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "locahost:8080" ]
      interval: 5s
      retries: 5
    env_file:
      - local.env
    depends_on:
      - bigTable
      - kafka1

  bigTable:
    hostname: big-table
    container_name: big-table
    image: ssivart/bigtable-emulator:v2021.08
    volumes:
      - .:/opt/folder_name/my_application:delegated
    working_dir: /opt/folder_name/my_application
    environment:
      - BIGTABLE_SCHEMA=transactions:user#amount
      - BIGTABLE_PROJECT=cbt-test
      - BIGTABLE_INSTANCE=finance-gcp-table
      - BIGTABLE_EMULATOR_HOST=big-table:8086
    ports:
      - 8086:8086

  zoo:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo

  kafka2:
      image: confluentinc/cp-kafka:7.3.2
      hostname: kafka2
      container_name: kafka2
      ports:
        - "9093:9093"
        - "29093:29093"
      environment:
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
        KAFKA_BROKER_ID: 2
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      depends_on:
        - zoo
  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
        - zoo


  kafka-setup:
      image: confluentinc/cp-kafka:7.3.2
      hostname: kafka-setup
      container_name: kafka-setup
      command: kafka-topics --create --if-not-exists --bootstrap-server kafka2:29093 --partitions 1 --replication-factor 1 --topic transactions
      depends_on:
        - zoo

  kafka-schema-registry:
      image: confluentinc/cp-schema-registry:7.3.2
      hostname: kafka-schema-registry
      container_name: kafka-schema-registry
      depends_on:
        - zoo
        - kafka1
        - kafka2
        - kafka3
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094'
        SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    ports:
      - "9001:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data

volumes:
  minio_data:


